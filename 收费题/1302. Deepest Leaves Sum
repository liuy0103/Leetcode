Approach 1: Iterative DFS Preorder Traversal.
Intuition

Here we implement standard iterative preorder traversal with the stack:

Push root into stack.

While stack is not empty:

Pop out a node from stack and update the current number.

If the node is a leaf

Update the deepest leaves sum deepest_sum.
Push right and left child nodes into stack.

Return deepest_sum.

Implementation

Note, that Javadocs recommends to use ArrayDeque, and not Stack as a stack implementation.


Complexity Analysis

Time complexity: \mathcal{O}(N)O(N) since one has to visit each node.

Space complexity: up to \mathcal{O}(H)O(H) to keep the stack, where HH is a tree height.



Approach 2: Iterative BFS Traversal.
Intuition

Here we implement standard iterative preorder traversal with the stack:

Add root into queue.

While queue is not empty:

Pop out a node from queue and update the current number.

If the node is a leaf

Update the deepest leaves sum deepest_sum.
Add first left and then right child node into queue.

Return deepest_sum.

Implementation


Complexity Analysis

Time complexity: \mathcal{O}(N)O(N) since one has to visit each node.

Space complexity: up to \mathcal{O}(N)O(N) to keep the queue. Let's use the last level to estimate the queue size. This level could contain up to N/2N/2 tree nodes in the case of complete binary tree.



Approach 3: Optimized Iterative BFS Traversal.
Intuition

The code in Approach 2 is not the optimal one. It's done this way to simplify DFS vs BFS comparison but now let's move further. Since we traverse level by level, it's enough just to check if this level is the last one. If it's the case, return the sum of all nodes values.

Current
1 / 6
Implementation


Complexity Analysis

Time complexity: \mathcal{O}(N)O(N) since one has to visit each node.

Space complexity: up to \mathcal{O}(N)O(N) to keep the queues. Let's use the last level to estimate the queue size. This level could contain up to N/2N/2 tree nodes in the case of complete binary tree.
