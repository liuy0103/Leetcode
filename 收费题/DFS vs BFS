1302. Deepest Leaves Sum

There are two ways to traverse the tree: DFS depth first search and BFS breadth first search. Here is a small summary

diff

Let's use this problem to discuss the difference between iterative BFS traversal with the queue and iterative DFS preorder traversal with the stack.

Both are starting from the root and going down, both are using additional structures, what's the difference?

Here is how it looks at the big scale: BFS traverses level by level, and DFS first goes to the leaves.

diff

Now let's go down to the implementation. The idea is similar:

Push root into queue (BFS) or stack (DFS).

At each step pop out one node, and push its children into stack/queue.

For BFS: pop out from the left, first push the left child, and then the right one.

For DFS: pop out from the right, first push the right child, and then the left one.


199. Binary Tree Right Side View
DFS vs. BFS

There are two ways to traverse the tree: DFS depth first search and BFS breadth first search. Here is a small summary

diff

BFS traverses level by level, and DFS first goes to the leaves.

diff

Which approach to choose, BFS or DFS?

The problem is to return a list of last elements from all levels, so it's the way more natural to implement BFS here.

Time complexity is the same \mathcal{O}(N)O(N) both for DFS and BFS since one has to visit all nodes.

Space complexity is \mathcal{O}(H)O(H) for DFS and
\mathcal{O}(D)O(D) for BFS, where HH is a tree height, and DD is a tree diameter. They both result in \mathcal{O}(N)O(N) space in the worst-case scenarios: skewed tree for DFS and complete tree for BFS.

BFS wins for this problem, so let's use the opportunity to check out three different BFS implementations with the queue.

BFS implementation

All three implementations use the queue in a standard BFS way:

Push the root into the queue.

Pop-out a node from the left.

Push the left child into the queue, and then push the right child.

diff

Three BFS approaches

The difference is how to find the end of the level, i.e. the rightmost element:

Two queues, one for the previous level and one for the current.

One queue with sentinel to mark the end of the level.

One queue + level size measurement.
