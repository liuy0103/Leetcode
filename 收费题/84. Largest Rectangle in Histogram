Divide and conquer

# This approach relies on the observation that the rectangle with maximum area will be the maximum of:

# The widest possible rectangle with height equal to the height of the shortest bar.

# The largest rectangle confined to the left of the shortest bar(subproblem).

# The largest rectangle confined to the right of the shortest bar(subproblem).
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        def helper(start, end):
            if start > end:
                return 0
            elif start == end:
                return heights[start]
            min_index = end
            for i in range(start, end):
                if heights[i] < heights[min_index]:
                    min_index = i
            left_area = helper(start, min_index-1)
            right_area = helper(min_index+1, end)
            return max((end-start+1)*heights[min_index], left_area, right_area)

        return helper(0, len(heights)-1)
